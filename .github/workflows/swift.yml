name: Build Unsigned IPA and Release

on:
  push:
    tags:
      - 'v*'  # 触发工作流的条件，仅在推送带有 v 开头的标签时触发（例如 v1.0.0）
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    runs-on: macos-latest  # 使用 macOS 环境，因为 Xcode 构建需要 macOS

    steps:
      # 1. 检出代码
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. 调试：列出文件结构
      - name: List Files in Repository
        run: |
          echo "Listing files in the repository:"
          ls -la
          echo "Checking for workspace file:"
          find . -name "*.xcworkspace" -type d
          echo "Checking for project file:"
          find . -name "*.xcodeproj" -type d
          echo "Checking for exportOptions.plist:"
          ls -la exportOptions.plist || echo "exportOptions.plist not found"
          echo "Content of exportOptions.plist:"
          cat exportOptions.plist || echo "Unable to read exportOptions.plist"

      # 3. 设置 Xcode 版本（可选，指定某个版本）
      - name: Select Xcode Version
        run: sudo xcode-select -switch /Applications/Xcode.app

      # 4. 安装依赖（如果项目使用 CocoaPods）
      - name: Install CocoaPods Dependencies
        run: |
          if [ -f "Podfile" ]; then
            pod install
          fi

      # 5. 构建项目并生成未签名的 IPA
      - name: Build Unsigned IPA
        run: |
          # 确保使用正确的 scheme 和 configuration，禁用签名
          xcodebuild -workspace "web-view.xcodeproj/project.xcworkspace" \
                     -scheme "web-view" \
                     -sdk iphoneos \
                     -configuration Release \
                     -archivePath ./build/web-view.xcarchive \
                     CODE_SIGN_IDENTITY="" \
                     CODE_SIGNING_REQUIRED=NO \
                     CODE_SIGNING_ALLOWED=NO \
                     IPHONEOS_DEPLOYMENT_TARGET=12.0 \
                     clean archive || echo "Build failed, check workspace path and scheme name"
          
          # 尝试导出未签名的 IPA 文件
          xcodebuild -exportArchive \
                     -archivePath ./build/web-view.xcarchive \
                     -exportOptionsPlist ./exportOptions.plist \
                     -exportPath ./build || echo "Export failed, proceeding to manual IPA creation"
          
          # 如果导出失败，手动打包 IPA 文件
          if [ ! -f "./build/web-view.ipa" ]; then
            echo "Manual IPA creation: Creating IPA from archive"
            mkdir -p ./build/Payload
            cp -r ./build/web-view.xcarchive/Products/Applications/web-view.app ./build/Payload/
            cp -r ./web-view/www ./build/Payload/web-view.app
            cd ./build
            zip -r web-view.ipa Payload
            cd ..
            ls -la ./build/web-view.ipa || echo "Manual IPA creation failed"
          fi

      # 6. 生成基于时间的动态 tag_name
      - name: Generate Dynamic Tag Name
        id: generate_tag
        run: |
          TAG_NAME="v$(date +%Y-%m-%d-%H-%M-%S)"
          echo "Generated tag_name: $TAG_NAME"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      # 7. 创建 Release，使用动态 tag_name
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 使用 GitHub 提供的令牌
        with:
          tag_name: ${{ steps.generate_tag.outputs.tag_name }}  # 使用动态生成的标签名称
          release_name: Release ${{ steps.generate_tag.outputs.tag_name }}  # 发布名称
          draft: false  # 是否为草稿，false 表示直接发布
          prerelease: false  # 是否为预发布版本

      # 8. 上传 IPA 文件到 Release
      - name: Upload IPA to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}  # 从 create_release 步骤获取上传 URL
          asset_path: ./build/web-view.ipa  # IPA 文件路径，匹配 scheme 名称
          asset_name: WebViewApp-${{ steps.generate_tag.outputs.tag_name }}.ipa  # 上传的文件名，包含动态标签
          asset_content_type: application/octet-stream  # 文件类型
